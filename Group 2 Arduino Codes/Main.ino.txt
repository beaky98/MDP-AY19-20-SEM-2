/**
 * Done by: Group 2 of 19/20 Sem 2
 * Peter Vickram & Tay Kee Kong
 * For more info check out our wiki
 * 
 */

// Libraries used                                                                                                                                                                                                                                                                                                                                                                                                                                                #include "DualVNH5019MotorShield.h"
#include <EnableInterrupt.h>
#include <PID_v1.h> 



/* setting up global variables
 */
DualVNH5019MotorShield motor;
byte data;
float RPM = 0;
int test = 1;
int fcor = 0;
double movconst = 9.6;
double delayconst = 0;
char arguments;
char degree;
double degreeconst = 0;


void setup()
{
  /* Hardware setup */
  Serial.begin(115200);
  //Serial.println("Dual VNH5019 Motor Shield");
  setupMotorEncoder();
  setupPID();
  
}

void loop()
{
 
   //main code
   //Pre-run calibration
    
   while (test == 1 ) {
     Serial.flush();
      
      delay(10);
       moveL(); //9 for 1 grid movement
       delay(10);
       moveL();

       delay(10);
       caliFront();    //calibration
       delay(100);
       moveR();
       delay(10);
       caliFront();    //calibration
       delay(100);
       moveR();
       test = 0;
       
        
  }
    
   double setdistance [10] = {9.6, 19.1, 29.1, 37.8, 48.1, 58.1, 68.6, 79.2, 89.2, 99.2}; // custom distance for fastest path {9.65, 19.4, 29.4, 38.6, 48.5, 58.5, 69.2, 79.2, 89.6, 99.6}

      arguments = Serial.read();
      //Serial.flush();
      
      if (arguments>= '0' && arguments <= '9' ){
        double movedist=setdistance[int(arguments - '0')];
        moveF(movedist);
      }

        //delay(200);<<<<<<<<<<<<<<<<<
      switch(arguments){
        
         // Take in sensor reading from starting position right when exploration starts
        case 'E': printIRReading();
                  break;
               
        // 1 grid forward       
        /*case 'F': moveF(movconst);
                  caliRight();
                  delay(10);
                  if(SFR_IR()==1 && SFL_IR()==1)
                          caliFront();
                  //delay(10);
                  printIRReading();
                //Serial.println("R");
                  break;*/

         case 'F': moveF(movconst);
                  delay(delayconst);
                  if(SFR_IR()==1 && SFL_IR()==1)
                          caliFront();
                  //delay(10);
                  printIRReading();
                //Serial.println("R");
                  break;         

         case 'H': if(SFR_IR()==1 && SFL_IR()==1)
                          caliFront();
                   break;

         // 1 grid forward       
  /*      case 'F': moveF(movconst);
                  delay(100);
                  if(SFR_IR()==1 && SFL_IR()==1)
                          caliFront();
                  else
                  {
                    if(fcor==3)
                    {
                      moveF(3);
                      fcor=0;
                    }
                    else
                      fcor++;
                  }
                  delay(100);
                  printIRReading();
                //Serial.println("R");
                  break;
*/
                  
                  
        // turn 90 left
        case 'L': moveL(); 
                  delay(delayconst);           
                  printIRReading();
                  break;
                  
        // turn 90 right
        case 'R': moveR(); 
                  delay(delayconst); 
                  printIRReading();
                  break;
                  
        // turn 90 right Fastest Path
        case 'U': moveRF(); 
                  delay(delayconst); 
                  printIRReading();
                  break;

        // turn degree left
        case'X' : degree= Serial.read();
                  degreeconst = (int)degree* 10;
                  //Serial.flush();
                  degree = Serial.read();
                  degreeconst+= (int)degree;
                  degreeconst = ((degreeconst*4.1236)/ 4.68);
                  moveL45F(degreeconst);
                  delay(delayconst);
                  printIRReading();
                  break;

         // turn degree right
        case'Y' : degree= Serial.read();
                  degreeconst = (int)degree* 10;
                  //Serial.flush();
                  degree = Serial.read();
                  degreeconst+= (int)degree;
                  degreeconst = ((degreeconst*4.1548)/ 4.68);
                  moveR45F(degreeconst);
                  delay(delayconst);
                  printIRReading();
                  break;
                  
                  
        // right hug calibrate
       case 'A': moveR(); 
                  delay(delayconst);
                  caliFront();
                  delay(delayconst);
                  printIRReading();
                  //delay(10);
                  moveL();
                  delay(20);
                  //Serial.println("PC,AR,OK");  
                  break;

    /*  case 'A': caliRight();
       delay(10);
                  //Serial.println("PC,AR,OK");  
            */      break;
       
      

        // left hug calibrate
        case 'B': moveL(); 

                  delay(delayconst);
                  caliFront();
                  delay(delayconst);
                  printIRReading();
                  //delay(10);
                  moveR();
                  delay(20);
                  //Serial.println("PC,AR,OK");  
                  break;

        //CaliRight
        case 'T':moveF(movconst);
                  delay(delayconst);
                  if(SFR_IR()==1 && SFL_IR()==1)
                          caliFront();
                  else 
                          caliRight();
                  printIRReading();
                  break; 
        
        // end exploration calibration          
        case 'C': delay(delayconst);
                  moveL();
                  delay(delayconst);
                  moveL();
                  delay(delayconst);
                  caliFront();    
                  //delay(10);
                  moveR();
                  delay(delayconst);
                  caliFront();    
                  //delay(10);
                  moveR();
                  break;

        // 2-grid forward movement          
        case 'D': moveFB(movconst);
                  delay(10);
                  printIRReading();
                  moveFB2(5.15);
                  delay(10);
                   if(SFR_IR()==1 && SFL_IR()==1)
                          caliFront();
                  else 
                          caliRight();
                  printIRReading();
                  break;

        case 'Z':  
        
                  moveFB(movconst);
                  delay(10);
                  printIRReading();
                  moveFB2(5.15);
                   if(SFR_IR()==1 && SFL_IR()==1)
                          caliFront();
                  delay(10);
                  printIRReading();
                  break;
        
        default: break;
        
      } // end switch 
} // end main loop

/*
 * Function to return sensor reading in wanted format
 */
void testRuns()
{
  printIRReading();
  delay(1000);
}
 
void printIRReading() {


  Serial.print("PC,AR,SL:");
  Serial.print(SL_IR());

  Serial.print(":SFL:");
  Serial.print(SFL_IR()); 

  Serial.print(":SFM:");  
  Serial.print(SFM_IR());

  Serial.print(":SFR:");
  Serial.print(SFR_IR());

  Serial.print(":SR1:");
  Serial.print(SR1_IR());

  Serial.print(":SR2:");  
  Serial.println(SR2_IR());

  Serial.flush();
  delay(10);
}
